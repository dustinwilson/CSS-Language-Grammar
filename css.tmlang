{	comment = 'CSS';
	patterns = (
		{	include = '#at-rule_import'; },
		{	include = '#rules'; },
		{	include = '#property-list'; },
		{	include = '#at-rule_font-face'; },
		{	include = '#at-rule_media'; },
		{	include = '#at-rule_namespace'; },
		{	include = '#at-rule_page'; },
		{	include = '#at-rule_charset'; },
		{	include = '#at-rule_viewport'; },
	);
	repository = {
		at-rule_charset = {
			name = 'meta.at-rule.charset.css';
			begin = '\s*(@charset)\s*';
			end = '(?=</style>)|\s*(;|(?=\}))';
			beginCaptures = { 1 = { name = 'keyword.control.at-rule.css'; }; };
			endCaptures = { 1 = { name = 'punctuation.terminator.rule.css'; }; };
			patterns = (
				{	include = '#string_double'; },
				{	include = '#string_single'; },
			);
		};
		at-rule_font-face = {
			name = 'meta.at-rule.font-face.css';
			begin = '(@font-face)';
			end = '(?=</style>|\{)';
			beginCaptures = { 1 = { name = 'keyword.control.at-rule.css'; }; };
		};
		at-rule_import = {
			name = 'meta.at-rule.import.css';
			begin = '\s*(@import)\s*';
			end = '(?=</style>)|\s*(;|(?=\}))';
			beginCaptures = { 1 = { name = 'keyword.control.at-rule.css'; }; };
			endCaptures = { 1 = { name = 'punctuation.terminator.rule.css'; }; };
			patterns = (
				{	name = 'meta.function.css';
					comment = 'This copies #function exactly except it checks for the presence of an @import immediately before it so it does not interfere with media features.';
					begin = '(?<=@import)\s+(?:((?:mso|-(?:ah|atsc|hp|khtml|moz|ms|ro|o|prince|rim|tc|wap|webkit|[\w\-]+))-[\w\-]+)|(url))\s*(\()';
					end = '\)';
					beginCaptures = {
						1 = { name = 'support.function.vendor.css'; };
						2 = { name = 'support.function.css'; };
						3 = { name = 'punctuation.section.function.css'; };
					};
					endCaptures = { 0 = { name = 'punctuation.section.function.css'; }; };
					patterns = (
						{	include = '#parameters'; },
						{	include = '#function'; },
					);
				},
				{	include = '#comment_block'; },
				{	include = '#string_single'; },
				{	include = '#string_double'; },
				{	include = '#media_type'; },
				{	include = '#media_feature'; },
			);
		};
		at-rule_media = {
			name = 'meta.at-rule.media.css';
			begin = '\s*(@media)\s*';
			end = '(?=</style>|\{)';
			beginCaptures = { 1 = { name = 'keyword.control.at-rule.css'; }; };
			patterns = (
				{	include = '#comment_block'; },
				{	include = '#media_type'; },
				{	include = '#media_feature'; },
				{	include = '#media_and'; },
				{	include = '#comma'; },
			);
		};
		at-rule_namespace = {
			name = 'meta.at-rule.namespace.css';
			begin = '\s*(@namespace)';
			end = '(?=</style>)|\s*(;)';
			beginCaptures = { 1 = { name = 'keyword.control.at-rule.css'; }; };
			patterns = (
				{	name = 'constant.namespace.prefix.css';
					match = '(?<=@namespace)\s+([-\w]+)\s*';
				},
				{	include = '#comment_block'; },
				{	include = '#string_single'; },
				{	include = '#string_double'; },
				{	include = '#function'; },
			);
		};
		at-rule_page = {
			name = 'meta.at-rule.page.css';
			begin = '\s*(@page)\s*';
			end = '\s*(?=</style>|\{)';
			captures = { 1 = { name = 'keyword.control.at-rule.css'; }; };
			patterns = (
				{	include = '#comment_block'; },
				{	match = '\s*([\w\-_]+)?(\:\b(first|last|left|right))?';
					captures = {
						1 = { name = 'constant.other.at-rule.page.page-name.css'; };
						2 = { name = 'entity.other.attribute-name.pseudo-class.css'; };
					};
				},
			);
		};
		at-rule_viewport = {
			name = 'meta.at-rule.viewport.css';
			begin = '\s*(?:(@viewport)|(@(?:mso|-(?:ah|atsc|hp|khtml|moz|ms|ro|o|prince|rim|tc|wap|webkit|[\w-]+))-viewport))\s*';
			end = '\s*(?=</style>|\{)';
			captures = {
				1 = { name = 'keyword.control.at-rule.css'; };
				2 = { name = 'keyword.control.at-rule.vendor.css'; };
			};
			patterns = ( { include = '#comment_block'; } );
		};
		comma = {
			name = 'punctuation.comma.css';
			match = ',';
		};
		comment_block = {
			name = 'comment.block.css';
			begin = '\s*/\*';
			end = '\*/';
			captures = { 0 = { name = 'punctuation.definition.comment.css'; }; };
		};
		function = {
			name = 'meta.function.css';
			begin = '(?:((?:mso|-(?:ah|atsc|hp|khtml|moz|ms|ro|o|prince|rim|tc|wap|webkit|[\w-]+))-[\w-]+)|(calc|counter|cubic-bezier|cycle|format|hsla|hsl|image|local|matrix3d|matrix|perspective|radial-gradient|repeating-linear-gradient|linear-gradient|repeating-radial-gradient|rgba|rgb|rotate3d|rotateX|rotateY|rotateZ|rotate|scale3d|scaleX|scaleY|scaleZ|scale|skewX|skewY|steps|translate3d|translateX|translateY|translateZ|translate|url))\s*(\()';
			end = '\)';
			beginCaptures = {
				1 = { name = 'support.function.vendor.css'; };
				2 = { name = 'support.function.css'; };
				3 = { name = 'punctuation.section.function.css'; };
			};
			endCaptures = { 0 = { name = 'punctuation.section.function.css'; }; };
			patterns = (
				{	include = '#parameters'; },
				{	include = '$self'; },
			);
		};
		function_attributes = {
			patterns = (
				{	name = 'punctuation.definition.css';
					match = ':';
				},
				{	include = '#comment_block'; },
				{	include = '#property-values'; },
				{	name = 'invalid.illegal.css';
					match = '[=\{\}\?\;\@]';
				},
			);
		};
		logical-operators = {
			name = 'keyword.control.operator';
			match = '(\=\=|\!\=|\<\=|\>\=|\<|\>|not|or|and)';
		};
		media_and = {
			name = 'meta.at-rule.media.and.css';
			match = '\s*(and)\s*';
			captures = { 1 = { name = 'keyword.at-rule.media.css'; }; };
		};
		media_feature = {
			name = 'meta.at-rule.media.feature.css';
			begin = '\s*(\()\s*';
			end = '\s*(\))\s*';
			captures = { 1 = { name = 'punctuation.definition.at-rule.media.feature.css'; }; };
			patterns = (
				{	name = 'meta.property-value.at-rule.media.css';
					begin = '(:)\s*';
					end = '\s*(?=\s*\))';
					beginCaptures = { 1 = { name = 'punctuation.separator.key-value.css'; }; };
					patterns = (
						{	name = 'punctuation.separator.ratio.css';
							match = '\/';
						},
						{	include = '#property-values'; },
					);
				},
				{	comment = 'For when a variable is used as a property value. Highlights the abandoned colon.';
					match = '(:)\s*';
					captures = { 1 = { name = 'punctuation.separator.key-value.css'; }; };
				},
				{	include = '#property-name'; },
			);
		};
		media_type = {
			name = 'meta.at-rule.media.type.css';
			match = '\s*(only|not)?\s*(all|aural|braille|embossed|handheld|print|projection|screen|speech|tty|tv)\s*';
			captures = {
				1 = { name = 'constant.token.at-rule.media.css'; };
				2 = { name = 'support.constant.at-rule.media.css'; };
			};
		};
		parameters = {
			patterns = (
				{	include = '#property-values'; },
				{	include = '#comment_block'; },
				{	include = '#string_unquoted'; },
				{	include = '#comma'; },
			);
		};
		properties = {
			patterns = (
				{	name = 'meta.property-name.css';
					begin = '(?<![-a-z])(?=[-a-z])';
					end = '$|(?![-a-z])';
					patterns = (
						{	include = '#property-name'; },
						{	include = '#at-rule_include'; },
					);
				},
				{	name = 'meta.property-value.css';
					begin = '(:)\s*(?!(\s*\{))';
					end = '\s*(;|(?=\}))';
					beginCaptures = { 1 = { name = 'punctuation.separator.key-value.css'; }; };
					endCaptures = { 1 = { name = 'punctuation.terminator.rule.css'; }; };
					patterns = (
						{	include = '#comment_block'; },
						{	include = '#property-values'; },
					);
				},
			);
		};
		property-list = {
			name = 'meta.property-list.css';
			begin = '\{';
			end = '\s*(?=</style)|\}';
			captures = { 0 = { name = 'punctuation.section.property-list.css'; }; };
			patterns = (
				{	include = '#rules'; },
				{	include = '#properties'; },
				{	include = '$self'; },
			);
		};
		property-name = {
			name = 'meta.property-name.css';
			match = '\s*(?:((?:mso|-(?:ah|atsc|hp|khtml|moz|ms|ro|o|prince|rim|tc|wap|webkit|[-\w]+))-[-\w]+)|(align-content|align-items|align-self|alignment-baseline|animation-delay|animation-direction|animation-duration|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|animation|aspect-ratio|azimuth|backface-visibility|background-attachment|background-clip|background-color|background-image|background-origin|background-position|background-repeat|background-size|background|baseline-shift|bikeshedding|bleed|bookmark-label|bookmark-level|bookmark-state|bookmark-target|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-bottom|border-collapse|border-color|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-image|border-left-color|border-left-style|border-left-width|border-left|border-radius|border-right-color|border-right-style|border-right-width|border-right|border-spacing|border-style|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|border-top|border-width|border|bottom|box-decoration-break|box-shadow|box-sizing|break-after|break-before|break-inside|caption-side|clear|clip-path|clip-rule|clip|color-index|color-interpolation-filters|color-interpolation|color-profile|color-rendering|color|column-count|column-fill|column-gap|column-rule-color|column-rule-style|column-rule-width|column-rule|column-span|column-width|columns|content|counter-increment|counter-reset|cue-after|cue-before|cue|cursor|device-aspect-ratio|device-height|device-width|direction|display|dominant-baseline|elevation|empty-cells|enable-background|fill-opacity|fill-rule|fill|filter|flex-align|flex-basis|flex-direction|flex-flow|flex-grow|flex-order|flex-pack|flex-shrink|flex-wrap|float-offset|float|flood-color|flood-opacity|font-family|font-feature-settings|font-kerning|font-language-override|font-size-adjust|font-size|font-stretch|font-style|font-synthesis|font-variant-alternates|font-variant-caps|font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant|font-weight|font|glyph-orientation-horizontal|glyph-orientation-vertical|grid-columns|grid-rows|grid|hanging-punctuation|height|hyphenate-after|hyphenate-before|hyphenate-character|hyphenate-limit-chars|hyphenate-limit-last|hyphenate-limit-lines|hyphenate-limit-zone|hyphenate-lines|hyphenate-resource|hyphens|image-rendering|image-resolution|justify-content|kerning|left|letter-spacing|lighting-color|line-break|line-height|list-style-image|list-style-position|list-style-type|list-style|margin-bottom|margin-left|margin-right|margin-top|margin|marker-end|marker-mid|marker-start|marker|marks|marquee-direction|marquee-loop|marquee-speed|marquee-style|mask|max-aspect-ratio|max-color-index|max-color|max-device-aspect-ratio|max-device-height|max-device-width|max-height|max-monochrome|max-resolution|max-width|min-aspect-ratio|min-color-index|min-color|min-device-aspect-ratio|min-device-height|min-device-width|min-height|min-monochrome|min-resolution|min-width|monochrome|opacity|order|orientation|orphans|outline-color|outline-offset|outline-style|outline-width|outline|overflow-style|overflow-x|overflow-y|overflow|padding-bottom|padding-left|padding-right|padding-top|padding|page-break-after|page-break-before|page-break-inside|pause-after|pause-before|pause|perspective-origin|perspective|phonemes|voice-pitch-range|pitch-range|pitch|play-during|pointer-events|position|quotes|resize|resolution|rest-after|rest-before|rest|richness|right|rotation-point|rotation|ruby-align|ruby-overhang|ruby-position|ruby-span|scan|shape-rendering|speak-header|speak-numeral|speak-punctuation|speakability|speak|speech-rate|src|stop-color|stop-opacity|stress|string-set|stroke-dasharray|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|stroke|tab-size|table-layout|text-align-last|text-align|text-anchor|text-autospace|text-decoration-color|text-decoration-line|text-decoration-skip|text-decoration-style|text-decoration|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-emphasis|text-indent|text-justify|text-outline|text-rendering|text-shadow|text-transform|text-trim|text-underline-position|text-wrap|top|transform-origin|transform-style|transform|transition-delay|transition-duration|transition-property|transition-timing-function|transition|unicode-bidi|vertical-align|vertical-position|view-mode|visibility|voice-balance|voice-duration|voice-family|voice-pitch|voice-rate|voice-stress|voice-volume|volume|white-space|widows|width|word-break|word-spacing|word-wrap|writing-mode|z-index|zoom))\s*';
			captures = {
				1 = { name = 'support.type.property-name.vendor.css'; };
				2 = { name = 'support.type.property-name.svg.css'; };
				3 = { name = 'support.type.property-name.css'; };
			};
		};
		property-values = {
			patterns = (
				{	include = '#string_single'; },
				{	include = '#string_double'; },
				{	include = '#function'; },
				{	include = '#value_important'; },
				{	include = '#value_unit'; },
				{	include = '#value_color'; },
				{	include = '#value_property-value'; },
				{	include = '#value_color-constant'; },
				{	include = '#value_number'; },
				{	include = '#value_font'; },
				{	include = '#value_operators'; },
			);
		};
		rules = {
			patterns = (
				{	include = '#comment_block'; },
				{	include = '#selectors'; },
			);
		};
		selector_attribute = {
			begin = '(\[)\s*([\w]+)\s*((\~|\^|\$|\*|\|)?\=)?\s*';
			end = '\s*(?=</style)|(\])';
			beginCaptures = {
				1 = { name = 'punctuation.definition.attribute-selector.begin.css'; };
				2 = { name = 'entity.other.attribute-name.css'; };
				3 = { name = 'keyword.operator.attribute-selector.css'; };
			};
			endCaptures = { 1 = { name = 'punctuation.definition.attribute-selector.end.css'; }; };
			patterns = (
				{	include = '#string_single'; },
				{	include = '#string_double'; },
			);
		};
		selector_class = {
			name = 'entity.other.attribute-name.class.css';
			match = '(\.)[\w_-]+';
		};
		selector_id = {
			name = 'entity.other.attribute-name.id.css';
			match = '(#)[a-zA-Z][\w_-]*';
		};
		selector_namespace = {
			name = 'meta.namespace-selector.css';
			match = '(?:([-\w]+)|(\*))\s*(\|)(?=[-\w\*\]])';
			captures = {
				1 = { name = 'storage.namespace.prefix.css'; };
				2 = { name = 'entity.name.tag.wildcard.css'; };
				3 = { name = 'punctuation.separator.namespace-selector.css'; };
			};
		};
		selector_pseudo-class = {
			name = 'meta.pseudo-class.css';
			comment = 'Empty pseudo-classes.';
			match = '(\:(?:active|checked|disabled|empty|enabled|first-child|focus|hover|indeterminate|last-child|link|only-child|root|target|visited))\b';
			captures = { 1 = { name = 'keyword.other.pseudo-class.css'; }; };
		};
		selector_pseudo-class-selector = {
			name = 'meta.pseudo-class.css';
			comment = 'Pseudo-classes containing selectors.';
			begin = '(\:not)\s*(\()';
			end = '(\))\s*';
			beginCaptures = {
				1 = { name = 'keyword.other.pseudo-class.css'; };
				2 = { name = 'punctuation.definition.pseudo-class.css'; };
			};
			endCaptures = { 2 = { name = 'punctuation.definition.pseudo-class.css'; }; };
			patterns = ( { include = '#selectors'; } );
		};
		selector_pseudo-class-string = {
			name = 'meta.pseudo-class.css';
			comment = 'Pseudo-classes containing strings.';
			begin = '(\:lang)\s*(\()';
			end = '(\))\s*';
			beginCaptures = {
				1 = { name = 'keyword.other.pseudo-class.css'; };
				2 = { name = 'punctuation.definition.pseudo-class.css'; };
			};
			endCaptures = { 2 = { name = 'punctuation.definition.pseudo-class.css'; }; };
			patterns = (
				{	include = '#string_double'; },
				{	include = '#string_single'; },
				{	include = '#string_unquoted'; },
			);
		};
		selector_pseudo-class-structural = {
			name = 'meta.pseudo-class.css';
			comment = 'Pseudo-classes containing structural calculations.';
			begin = '(\:(?:first-of-type|last-of-type|nth-child|nth-last-child|nth-last-of-type|nth-of-type|only-of-type))\s*(\()';
			end = '(\))\s*';
			beginCaptures = {
				1 = { name = 'keyword.other.pseudo-class.css'; };
				2 = { name = 'punctuation.definition.pseudo-class.css'; };
			};
			endCaptures = { 2 = { name = 'punctuation.definition.pseudo-class.css'; }; };
			patterns = (
				{	include = '#value_number'; },
				{	include = '#value_operators'; },
				{	match = '\s*(n)\s*';
					captures = { 1 = { name = 'variable.structure-calculation.pseudo-class.css'; }; };
				},
			);
		};
		selector_pseudo-element = {
			patterns = (
				{	name = 'meta.pseudo-element.css';
					match = '(\:\:(?:((?:mso|-(?:ah|atsc|hp|khtml|moz|ms|ro|o|prince|rim|tc|wap|webkit|[\w-]+))-[\w-]+)|(after|before|first-letter|first-line|marker|selection)))\b';
					captures = {
						1 = { name = 'keyword.other.pseudo-element.vendor.css'; };
						2 = { name = 'keyword.other.pseudo-element.css'; };
					};
				},
				{	name = 'meta.invalid.css';
					comment = 'Pseudo-elements with only one colon will indeed work, but they are invalid!';
					match = '(?<!\:)(\:(?:after|before|first-letter|first-line|marker|selection))\b';
					captures = { 1 = { name = 'invalid.illegal.css'; }; };
				},
			);
		};
		selector_type = {
			name = 'meta.type-selector.css';
			match = '(?<!\-)\b(abbr|acronym|address|applet|area|article|aside|audio|basefont|base|a|bdo|big|blockquote|body|br|button|b|canvas|caption|center|cite|code|colgroup|col|command|datalist|dd|defs|del|desc|details|dfn|dir|div|dl|dt|embed|em|fieldset|figcaption|figure|font|footer|form|frameset|frame|h1|h2|h3|h4|h5|h6|header|head|hgroup|hr|html|iframe|image|img|input|ins|isindex|i|kbd|keygen|label|legend|g|link|listing|li|map|mark|main|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|param|plaintext|pre|progress|q|rp|rt|ruby|samp|script|p|section|select|small|source|span|strike|strong|style|sub|summary|sup|svg|switch|symbol|s|table|tbody|td|textarea|tfoot|thead|th|time|title|track|tr|tt|ul|use|u|var|video|wbr|xmp)\b(?!\-|\s{2,}\:|\s*\:\s|\s*\:[^A-Za-z\:]|\s*\:\-\d)';
			captures = { 1 = { name = 'entity.name.tag.css'; }; };
		};
		selector_universal = {
			name = 'entity.name.tag.wildcard.css';
			match = '\*(?![\w])';
		};
		selectors = {
			patterns = (
				{	include = '#selector_namespace'; },
				{	include = '#selector_type'; },
				{	include = '#selector_class'; },
				{	include = '#selector_id'; },
				{	include = '#selector_pseudo-class'; },
				{	include = '#selector_pseudo-class-selector'; },
				{	include = '#selector_pseudo-class-string'; },
				{	include = '#selector_pseudo-class-structural'; },
				{	include = '#selector_universal'; },
				{	include = '#selector_pseudo-element'; },
				{	include = '#selector_attribute'; },
			);
		};
		string_double = {
			name = 'string.quoted.double.css';
			begin = '"';
			end = '"';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.css'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.css'; }; };
			patterns = (
				{	name = 'constant.character.escape.css';
					match = '\\.';
				},
			);
		};
		string_single = {
			name = 'string.quoted.single.css';
			begin = "'";
			end = "'";
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.css'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.css'; }; };
			patterns = (
				{	name = 'constant.character.escape.css';
					match = '\\.';
				},
			);
		};
		string_unquoted = {
			name = 'string.unquoted.css';
			match = '[^''",) \t]+';
		};
		value_color = {
			name = 'constant.other.color.rgb-value.css';
			match = '(#)(?:[0-9a-fA-F]{1,6})\b';
			captures = { 1 = { name = 'punctuation.definition.constant.css'; }; };
		};
		value_color-constant = {
			name = 'support.constant.color.css';
			match = '\b(?i:aliceblue|antiquewhite|aquamarine|aqua|azure|beige|bisque|black|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|darkcyan|cyan|darkblue|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|blue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|goldenrod|gold|lightgray|gray|greenyellow|green|honeydew|hotpink|indianred|indigo|ivory|khaki|lavenderblush|lavender|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgreen|lightgrey|grey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|lime|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olivedrab|olive|orangered|orange|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|whitesmoke|white|yellowgreen|yellow)\b';
		};
		value_font = {
			name = 'support.constant.property-value.css';
			match = '(\b((?i:arial|cambria|century|comic|consolas|constantia|corbel|cordia|courier|garamond|georgia|helvetica|impact|inconsolata|lucida|menlo|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings)|cursive|fantasy|monospace|sans-serif|serif)\b)';
		};
		value_important = {
			name = 'keyword.other.important.css';
			match = '\!\s*important';
		};
		value_number = {
			name = 'constant.numeric.css';
			match = '(?:-)?[0-9]+(?:\.[0-9]+)?';
		};
		value_operators = {
			name = 'keyword.control.operator.css';
			match = '(?:\b(\+|-|\*|/)\b)';
		};
		value_property-value = {
			name = 'meta.property-value.css';
			match = '\b(?:((?:mso|-(?:ah|atsc|hp|khtml|moz|ms|ro|o|prince|rim|tc|wap|webkit|[\w-]+))-[\w-]+)|(A3|A4|A5|above|absolute|accumulate|active|after-edge|alias|all-scroll|allow-end|alphabetic|alternate|always|antialiased|armenian|auto|avoid-column|avoid-page|avoid|B4|B5|balance|baseline|before-edge|behind|below|button-bevel|bevel|bicubic|bidi-override|bilinear|blink|block|bolder|bold|border-box|both|bottom|break-all|break-word|button-small|button|butt|capitalize|caption|caret|cell|center-left|center-right|center|central|checkbox-container|checkbox-small|all|checkbox|circle|clear|clip|clone|close-quote|code|col-resize|collapse|column-reverse|column|compress|condensed|contain|content-box|context-menu|continuous|copy|cover|crispEdges|crop|crosshair|cross|currentColor|current|dashed|decimal-leading-zero|decimal|default|device-height|device-width|dialog|digits|disabled|disc|distribute|dotted|dot|double-circle|double|e-resize|each-line|ease-in-out|ease-in|ease-out|ease|edges|ellipsis|embed|end|evenodd|ew-resize|extra-condensed|extra-expanded|expanded|far-left|far-right|faster|fast|filled|fill|first|fixed|flat|flex-end|flex-start|flex|force-end|forward|from-image|full-size-kana|full-width|geometricPrecision|georgian|groove|hanging|help|hidden|hide|higher|high|horizontal-tb|horizontal|icon|ideographic|inactive|infinite|inherit|ink|inline-block|inline-flex|inline-table|inline|inset|inside|inter-cluster|inter-ideograph|inter-word|invert|isolate|italic|justify|kashida|keep-all|landscape|last|ledger|left-side|leftwards|left|legal|letter|level|lighter|line-through|linearRGB|linear|list-item|listbox|listitem|literal-punctuation|loose|loud|lower-alpha|lower-greek|lower-latin|lower-roman|lowercase|lower|low|lr-tb|lr|ltr|manual|marquee-block|marquee-line|match-parent|mathematical|maximum|medium|meet|menulist-button|menulist-textfield|menulist-text|menulist|menu|message-box|middle|miter|mixed-right|mix|moderate|move|n-resize|ne-resize|nesw-resize|no-change|no-close-quote|no-compress|no-drop|no-open-quote|no-punctuation|no-repeat|none|nonzero|normal|not-allowed|nowrap|ns-resize|nw-resize|nwse-resize|objects|oblique|once|open-quote|open|optimizeLegibility|optimizeQuality|optimizeSpeed|ordinal|outset|outside|overline|padding-box|page|painted|plaintext|pointer|portrait|pre-line|pre-wrap|preserve-3d|preserve-breaks|preserve|pre|progressbar|progress|push-button|radio-container|radio-small|radio|reduced|relative|repeat-x|repeat-y|repeat|reset-size|reverse|ridge|right-side|rightwards|right|rl-tb|rl|root|round|row-resize|row-reverse|row|rtl|ruby|s-resize|scale-down|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|scrollbar|scroll|se-resize|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|searchfield|semi-condensed|semi-expanded|separate|separator|sesame|show|sideways-left|sideways-right|sideways|silent|slashed-zero|slice|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|slide|slower|slow|small-caps|small-caption|snap|soft|solid|space-around|space-between|spaces|space|spell-out|square-button|square|sRGB|start|static|status-bar|statusbar|step-end|step-start|stretch|strict|stroke|strong|style|subpixel-antialiased|sub|super|sw-resize|tab-left-edge|table-caption|table-cell|table-column-group|table-column|table-footer-group|table-header-group|table-row-group|table-row|table|tabpanels|tab|tb-rl|tb|text-after-edge|text-before-edge|text-bottom|text-top|textarea|textfield|text|thick|thin|toolbarbutton|toolbar|toolbox|tooltip|top|transparent|treeheadercell|treeheadersortarrow|treeitem|treetwistyopen|treetwisty|treeview|triangle|ultra-condensed|ultra-expanded|underline|upper-alpha|upper-latin|upper-roman|uppercase|upright|use-glyph-orientation|use-glyphs|use-script|vertical-lr|vertical-rl|vertical-text|vertical|visibleFill|visiblePainted|visibleStroke|visible|w-resize|wait|wavy|weight|wrap-reverse|wrap|x-fast|x-high|x-loud|x-low|x-slow|x-soft|x-strong|x-weak|weak|zoom-in|zoom-out|zoom))\b';
			captures = {
				1 = { name = 'support.constant.property-value.vendor.css'; };
				2 = { name = 'support.constant.property-value.css'; };
			};
		};
		value_unit = {
			name = 'keyword.other.unit.css';
			match = '(?<=[\d])(ch|deg|dpcm|cm|dpi|dppx|em|ex|grad|in|kHz|Hz|mm|ms|pc|pt|px|rad|rem|s|turn|vh|vmin|vw)\b|%';
		};
	};
}